// Not sure if this was the author's original idea.
//
// Here, instead of a generator, we use an object and replace
// value of the iterator property by the getter function.
//
// With this approach, we can avoid calculating the value
// in the next iteration loop and delay it until the value
// is actually requested.
//
// To make this faster, we use a precomputed prime number table
// to start from, so for any request we don't calculate more
// than 100k + requested prime numbers.

const isPrime = (n) => {
  let i = 3;
  while (true) {
    if (n % i === 0) return false;
    i++;
    if (i * i > n) return true;
  }
};

// 100k-th prime number, 200k prime number, etc
let cache = [
  1299721, 2750161, 4256249, 5800139, 7368791, 8960467, 10570849, 12195263,
  13834127, 15485867, 17144507, 18815249, 20495861, 22182379, 23879539,
  25582163, 27290311, 29005549, 30723773, 32452867, 34186063, 35926309,
  37667713, 39410869, 41161751, 42920209, 44680327, 46441223, 48210719,
  49979693, 51754999, 53533523, 55316939, 57099349, 58886033, 60678109,
  62473049, 64268783, 66068923, 67867979, 69672853, 71480063, 73289717,
  75103543, 76918277, 78736487, 80556709, 82376243, 84200287, 86028157,
  87857533, 89687693, 91519081, 93354689, 95189093, 97026263, 98866931,
  100711463, 102551573, 104395303, 106244939, 108092983, 109938683, 111794899,
  113648413, 115507919, 117363997, 119227013, 121086479, 122949829, 124811189,
  126673979, 128541817, 130408843, 132276713, 134151007, 136023763, 137896303,
  139772291, 141650963, 143522957, 145403471, 147281041, 149163299, 151048973,
  152935963, 154819711, 156704131, 158594209, 160481219, 162373339, 164263007,
  166158649, 168048739, 169941223, 171834301, 173729893, 175628473, 177525769,
  179424691, 181327579, 183236569, 185133833, 187038041, 188943817, 190850581,
  192761047, 194667089, 196576759, 198491329, 200402017, 202313627, 204227479,
  206141401, 208055047, 209968651, 211887457, 213808403, 215723341, 217645199,
  219566131, 221489561, 223407641, 225330881, 227254213, 229179877, 231104369,
  233031229, 234961007, 236887699, 238810207, 240737963, 242673449, 244605377,
  246534487, 248467649, 250399343, 252334751, 254269523, 256203221, 258142009,
  260079361, 262016011, 263956243, 265892021, 267836671, 269778617, 271723979,
  273666941, 275604547, 277547609, 279495497, 281436553, 283384393, 285335587,
  287282227, 289230101, 291178001, 293126107, 295075153, 297027277, 298981139,
  300928469, 302883151, 304836293, 306789653, 308739247, 310695797, 312650557,
  314606891, 316564793, 318525731, 320486191, 322445923, 324407131, 326363251,
  328323209, 330287569, 332252363, 334214467, 336175529, 338141569, 340104241,
  342066091, 344032391, 345996263, 347966401, 349931947, 351901169, 353868019,
  355836337, 357807473, 359777777, 361749979, 363720403, 365691323, 367660399,
  369638219, 371614363, 373587911, 375556459, 377528093, 379499353, 381471617,
  383446691, 385426549, 387404137, 389381621, 391364153, 393342743, 395318837,
  397303559, 399284917, 401265737, 403245719, 405225649, 407205781, 409192999,
  411174227, 413158523, 415142293, 417125279, 419113753, 421101649, 423087253,
  425069573, 427057793, 429042797, 431031857, 433024253, 435011267, 437003069,
  438990701, 440981153, 442967117, 444960067, 446952503, 448943711, 450937139,
  452930477, 454923607, 456911509, 458910607, 460908053, 462900953, 464895103,
  466890341, 468884879, 470882803, 472882049, 474883949, 476880797, 478876103,
  480871423, 482873137, 484870097, 486870889, 488874803, 490872911, 492876863,
  494877797, 496876907, 498879481, 500883577, 502895647, 504900127, 506904221,
  508910533, 510921781, 512927377,
];

let passed = 0;
const getVal = {
  get value() {
    if (passed === 0) return 2;
    let current = 3;
    const cachedIndex = Math.floor(passed / 100000);
    if (cachedIndex - 1 > -1 && cachedIndex - 1 < cache.length) {
      current = cache[cachedIndex - 1];
    }
    const p = passed < 100000 ? passed - 1 : passed;
    for (let i = 0; i < p - cachedIndex * 100000; i++) {
      current += 2;
      while (!isPrime(current)) {
        current += 2;
      }
    }
    return current;
  },
};

class Primes {
  static stream() {
    passed = -1;
    return {
      next() {
        passed++;
        return getVal;
      },
    };
  }
}
